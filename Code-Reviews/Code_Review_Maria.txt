Author of Code Review:	Maria Stein
Date of Code Review:	4/23/2022
Sprint Number:			5
Name of File:			ItemHandler.cs	
Author of File:			Aadya Jain
Comments On Code Readability:
The code is readable, and the syntactic decisions are consistent 
I personally dislike having both Instance and instance
There’s a magic number on line 74
The only reason I would think to not include speaker here is because it doesn’t require creating a projectile the way most of the other items do, but If the triangle implementation goes here, I think the speaker should too
Comment says order, why is order relevant?
Scroller functions are good and concise

Author of Code Review:	Maria Stein
Date of Code Review:	4/23/2022
Sprint Number:			5
Name of File:			GoriyaEnemy.cs
Author of File:			AJ Waizmann
Minutes It Took To Complete Review:  15
Comments on Code Quality:
Variables should be classified as private, public, etc.
Purpose of lengthOfAction?
Would name verticalDis something more explicit
Lots of magic numbers
Update is too long and difficult to understand. 


Author of Code Review:	Maria Stein
Date of Code Review: 4/8/2022
Sprint Number:			4
Name of File:			GelEnemy.cs
Author of File:			AJ Waizmann

Comments On Code Quality:
*Note: this file was created for Sprint2, but significant changes were made since.
I personally would declare all variables in constructor. I also would make sure to include “public” or “private” for each of
them. I don’t want to make a statement about whether or not it’s good or bad but I’m uncertain about the way that Update manages
the different types of enemy movement, it seems like since it’s the same as the way that the other enemies move it probably 
make sense to instead call a more general function that could work for all of them instead of using duplicated code.
In general comments would be helpful for readability, but I think the code overall is fairly well organized and easy to read.


Author of Code Review:	Maria Stein
Date of Code Review: 4/8/2022
Sprint Number:			4
Name of File:			CollisionResolution.cs
Author of File: Rachel Watters
Minutes It Took To Complete Review:  25

Comments on Code Readability:
*Note: this file was created for Sprint3, but significant changes were made since.
I would move strings to be declared inside constructor (not sure if this is a real thing or a rule I just made up for myself?)
I think the CollisionDictionary is good because it helps the code be much shorter and more concise than it could be and I like
the comments that were added, I think they’re appropriate and helpful.
I think ResolveCollision might benefit from some comments. I might be misunderstanding the logic here but I’m not sure I
understand why there needs to be duplicated code in ResolveCollision. Also I think ResolveCollision is kind of long and
could be split into a few smaller functions.


Author of Code Review:	Maria Stein
Date of Code Review:	3/11/2022
Sprint Number:			3
Name of File:			PlayerMoveState.cs
Author of File:			Anooj Deshpande

Comments On Code Quality:
*Note: this file was created for Sprint2, but significant changes were made since.
Overall this code is well-organized and easy to follow. The original code for this class had nested if-else statements comparing the location to magic numbers
and increasing/decreasing it by velocity. This code handles movement more cleanly by using the physics class to add/subtract the appropriate distance from the
player's location, and by making location and direction be accessed and updated directly using the Player player, rather than relying on unnecessary parameters and
variables in the constructor. There is still a lot of duplicated code, since each of the Player_State classes are nearly identical other than in their Updatemethods.
I think that the sprite creation is very awkwardly placed in the file and should have its own method.
I'm not sure if this is an error or if this is being saved for a future sprint (there isn't a comment explaining the future purpose or anything), but although I agree
with the decision to use player.physics.horizontalDistance instead of velocity, now velocity is completely useless. Also I'm not sure why it stays at zero.

Hypothetical Change(s) to to the Game that Are/Are Not Supported by This Code:
Adding different possible speeds would require use of the velocity variable, but I doubt this was the reason it is still included in the code.


Author of Code Review:	Maria Stein
Date of Code Review:	3/11/2022
Sprint Number:			3
Name of File:			CollisionResolution.cs
Author of File:			Rachel Watters

Minutes It Took To Complete Review:  20

Comments on Code Readability:
I think it would be worth having a comment to clarify what the directions mean (if collideDirection=right, which object is being hit on the right? etc).
The decision to store everything in this collisionDictionary minimizes unnecessary code and allows the class to be concise and significantly shorter than it could be.
That being said I think it also makes the code a little bit overly complicated and difficult to read. I would recommend using comments to explain the logic and purpose
of the different statements.



Author of Code Review:	Maria Stein
Date of Code Review:	2/19/2022
Sprint Number:			2
Name of File:			PlayerItemState.cs	
Author of File:			Sebastian King

Comments On Code Quality:
Projectiles shouldn't need to be passed here.
The use of a timer to determine when the state is over will probably need to be changed for future sprints.
The Attack and UseItem methods are useless here (and in some other classes, maybe should refactor).
One thing that I found confusing my first time looking at the code was "FaceRight" and "faceRight" having near identical names.
Personally I would use different names for these.
Each method is concise. Comments could be more descriptive.
The code is readable, and the spacing, variable naming, and other syntactic decisions are consistent (with the exception of the brackets on 22-23).
I understand that projectile and this.projectile are different and there is nothing technically incorrect or problematic about this 
naming decision, but personally I find using the same name to be confusing.

Hypothetical Change(s) to to the Game that Are/Are Not Supported by This Code:
Transition to next state should happen when the animation is complete, but with the current implementation the length of time before the state
changesis not guaranteed to match the length of the animation.


Author of Code Review:	Maria Stein
Date of Code Review:	2/19/2022
Sprint Number:			2
Name of File:			GoriyaEnemy.cs
Author of File:			AJ Waizmann

Minutes It Took To Complete Review:  18

Comments on Code Readability:
There is only one descriptive comment.
None of the variables are classified as private, public, etc.
It might be better to have one enemy class with sprite, health, etc. instead of having different classes for each enemy. This is more about 
maintainability than readability, but there's a lot of duplicated code.
All of the methods are concise with the exception of Update(), which looks messy and should be refactored. The brackets and spacing are inconsistent
and the function looks a little squished and difficult to read.
