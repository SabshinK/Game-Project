SPRINT 5
Author of Code Review:    Rachel Watters
Date of Code Review:	    4/23/2022
Sprint Number:    5
Name of File:     UIManager.cs
Author of File:    Anooj Deshpande

Code Quality Comments:
- This class has access to a lot of objects. It is the function of this, so it makes sense, but, like Player, it might risk becoming too powerful. It hasn't yet though. 
- 

Hypothetical Change(s) to to the Game that Are/Are Not Supported by This Code:
	

Author of Code Review:    Rachel Watters
Date of Code Review:	    4/23/2022
Sprint Number:    5
Name of File:     Bomb.cs
Author of File:    Maria Stein
Minutes It Took To Complete Review:     15 

Comments On Readability: 
- The variables are spaced out and separated by function, which helps me to understand what functionalities are necessary in this file.
- Comments help me understand the author's thought process
- There are some magic numbers in this file. Because I have worked on this project enough, I recongize the value to mean something significant, but if I hadn't looked at this project before, I may not be able to decipher what that value means
- Some methods do nothing, which is fine, but it might be a good idea to include a brief explanation in a comment on why the method does nothing.
- Variables are well-named
- the lifespan equalling "2f" doesn't mean much to me. What will change this value (aka what is this variable measuring)?

Overall, I found this code to be quite readable. However, there seems to be some assumptions made that I am always following the author's thinking (because of some variable names and magic numbers), and because I have worked on this project, I am, but that might not always be the case.

SPRINT 4
Author of Code Review:    Rachel Watters
Date of Code Review:	    4/9/2022
Sprint Number:    4
Name of File:     GameObjectManager.cs
Author of File:    Sebastian King

Code Quality Comments:
- Variable names are clear. It makes it easier to understand what the code is doing and debug.
- There are some comments that are potentially outdated. Be sure to delete resolved comments and comments that are no longer relevant.
- Each function appears to be performing the appropriate tasks for it. No one method has too much responsibility and there are no unnecessary methods in my opinion.
- It makes sense to me, so that’s good.
- This class uses interfaces like IGameObject and IMoveable to sort the lists and manipulate them. This will help extend the code’s lifespan because it is able to encapsulate all the objects with these interfaces in useful and efficient ways.
- The class has “safety measures” in place. It is obvious that some defensive programming took place as there are conditions which manipulate the code in ways that prevent bugs. In Update(), a queue is used to add or remove objects that were not able to be manipulated within the lists because an iteration was taking place.
- The code is pretty clean. The spacing makes it easier to read and there aren’t large blocks of code to sort through. 

Hypothetical Change(s) to to the Game that Are/Are Not Supported by This Code:
	The team is considering splitting the level up into columns, and each object would belong to a specific column. This will change the format and structure of the object lists. This will help us build levels and assess collisions, but it would require a lot of refactoring of the GameObjectManager as well as other objects. In the future, the lists may have to be changed as well as the logic for registering and removing objects, taking into account that they are in a specific column.

Author of Code Review:    Rachel Watters
Date of Code Review:	    4/9/2022
Sprint Number:    4
Name of File:     CollisionDetection.cs
Author of File:    Maria Stein
Minutes It Took To Complete Review:     25 

Comments On Readability: 
- Variable names often start with the same sequence of letters. For example, there are two variables that are “rectangleObject1” and “rectangleObject2”. This makes it hard to distinguish between these variables at a glance, making it take longer to understand the code. 
- Maybe try something like “firstRectangle” and “secondRectangle” or another appropriate choice for this code.
The variables are well sectioned when declared. I understand which variables serve similar purposes, and which ones are needed for certain functionalities.
- I understand the reason, but it may be unclear to the reader as to why the CollisionDetection constructor is empty. Maybe adding a comment inside that method would help alleviate some confusion?
- The comment just inside CheckCollision is a bit wordy and hard to understand. It’s also a block of text, which is difficult to read. Try spacing it out and simplifying it down to what you need to say.
- The comments after the first one inside CheckCollision are all really good and help the reader to understand what’s going on. (Describing what each collision looks like to the player is something I found helpful.

Overall, I found this code approachable. There were some readability issues with variable names, and structure, but I was able to interpret what was going on here decently fast. The comments in CheckCollision helped a lot, and the spacing out of the variables by functionality made interpreting them much easier.


SPRINT 3

Author of Code Review:    Rachel Watters
Date of Code Review:	    3/12/2022
Sprint Number:    3
Name of File:     CollisionDetection.cs
Author of File:    Maria Stein

Code Quality Comments:
- The variables listed at the beginning of the class are well sorted, and clearly indicate what they will be manipulating. 
- Problems are consolidated to specific methods, which makes debugging easier and makes it clear what will happen in the case of a collision. 
- Because collision is so complex, it might help to have some comments that explain the logic behind when there is a collision and when there is not a collision.
- If statements verifying the type of the object can likely be removed by refactoring the code. The code needs to be reworked so that it can perform operations on each object regardless of the type. 
- There are a lot of float values. Can these values be consolidated into one data structure?

Hypothetical Change(s) to to the Game that Are/Are Not Supported by This Code:
	This code relies on the values 128 and 64 to calculate the size of the sprite. The author correctly wants to use code that directly accesses the size of each sprite, but that is not possible at this time. Moving forward, there needs to be a variable established (potentially in the IDrawable interface) that is implemented by all of the drawable classes, and can therefore be accessed when the class type of the variable is unknown. This will create a better design for accessing the size that can be used in the future. This should hopefully remove any “if” statements that assess the type of the object, making cleaner and more efficient code. Additionally, in general, there are a lot of float values. It may be beneficial to create some kind of data structure or reworking of those variables to make the class less crowded and more clear. 
	

Author of Code Review:    Rachel Watters
Date of Code Review:	    3/12/2022
Sprint Number:    3
Name of File:     GameObjectManager.cs
Author of File:    AJ Waizmann
Minutes It Took To Complete Review:     15 

Comments On Readability: 
- Variable names are clear and easy to work with.
- Comments make it clear that the GameObjectManager is a singleton, and hence it is easier to work with it throughout the code, since that knowledge is laid out clearly. 
- Update cycles through only a few of the lists that are created at the top of the file. Because of this, it may be a good idea to include small comments that detail exactly what is happening when cycling through each list. 
- The variable names combined with the method names make it very clear what is happening in each method. 

Overall, I think this code is clear and efficient. There may be a way to refactor this code so that it uses only one, large list. However, the application of the four distinct lists makes it obvious what is happening to each object in the list, and what each method is trying to do with the method calls. This class will change as the code develops, so we need to be sure it remains clear what is happening in each method (especially in the case where the lists are combined into one list of all the objects).


SPRINT 2

Author of Code Review:    Rachel Watters
Date of Code Review:	    2/19/2022
Sprint Number:    2
Name of File:     BatStateMachine.cs
Author of File:    AJ Waizmann

Code Quality Comments:
The variables above the class constructor are well sorted and easy to read through.
Perhaps, to limit confusion, the variable names could have the word “Enemy” in them so that they aren’t accidentally compared to the Player’s states and variables. 
It looks like the variable names have good syntax, which really helped with my ability to understand the code.
The example for “GoombaStateMachine” on our class website talks about utilizing an if/else structure as well as looking at the enemy’s health to determine movement. That might be an option to look at.

Hypothetical Change(s) to to the Game that Are/Are Not Supported by This Code:
	This StateMachine uses random numbers to determine the pathing of the enemies. Given that some enemies will be on platforms, some will be in secluded areas, and some won’t stray a certain distance away from where they started, we may want to conduct this moment differently. Random movement doesn’t allow for much control over where enemies are going, so we may want to try another method so that we ensure enemies stay in certain areas (eg. more difficult enemies should stay near the end of the level, flaying enemies should stay above ground, enemies on a platform should stay on that platform, etc.). 
	We could potentially do this by defining a range for each enemy type, and then placing those distinct types in similar locations (eg. on/off a platform, in the air, on the ground level, etc.). The enemies could either move randomly in this range, or they could move in a set pattern. We could also implement a radius, where they chase the player when they get close, and otherwise maintain a constant movement pattern. As stated earlier, the example on our class website called “GoombaStateMachine” suggests using an if/else structure and the “health” variable.
	I think the “stateArray” is a cool way to keep track of an enemy’s behavior, but I worry that the array is getting changed too often, and the player won’t be able to discern a pattern with which to defeat the enemy. I think, as I stated before, we want the enemies to follow some king of pattern to give the player visual cues.
	Awesome work!
  

Author of Code Review:    Rachel Watters
Date of Code Review:	    2/19/2022
Sprint Number:    2
Name of File:     ItemManager.cs
Author of File:    Maria Stein
Minutes It Took To Complete Review:  20  

Comments On Readability:
Some portions of variable names are abbreviated like “numItems”, which is an int indicating the total number of items in the game. It may be clearer to simply write “numberOfItems'' as the variable name. 
The author needs to be sure to classify “public”, “private”, etc. for every variable to avoid confusion and error. 
To improve readability, it may be a good idea for the author to group variable declarations above the constructor class by functionality, type, or available. (Eg. all the private variables are grouped, all the int’s are grouped, all of the variables contributing to the item List are grouped, etc.).
The code could use some comments explaining what is happening for each method, or for the author’s general thought process. 
Because the method “FeedItemList()” is called only once, it may be better to rename it to something like “CreateItemList()”. I think the word “feed” implies something like “add”, where it could occur more than once in the code. 
NextItem() and PreviousItem() were very clear to me in terms of their logic and readability. The names of the variables and methods were descriptive, and the code was spaced so that it was easy to read. 
Overall, I would say this code reads pretty well. I think variable name changes could make variable and method functionalities clearer, and there could be more thought put into where certain code is written. Arranging lines with purpose could make the variable declarations, in particular, much clearer. Great work!

