Code reviews by Sebastian King

02-19-22
Sprint 2

Readability:
Reviewing KeyBoardControllerDraft.cs by Aadya Jain
The code is fairly readable, it adheres to naming conventions, there are a few useless comments about wanting to make a new file and getting rid 
of the old keyboard controller when PlayerManager.cs is finished, which became Player.cs. Code is not cluttered and is spaced evenly, most methods 
have no need for comments so their absence is fine here. Method names adhere to what they do in the class and are cohesive.
Review time: 10 minutes

Maintainability:
Reviewing ItemManager.cs by Maria Stein
There is a bug in the code, when trying to initialize the List<ISprite> it is trying to be initialized like an array but Lists are a dynamic type 
so numItems is not needed. There is a cleaner way of changing the array index in both NextItem() and PreviousItem() so that the double index is not 
necessary using the modulo operator. Eventually this manager class will be deleted and replaced with an ObjectManager that keeps track of all the 
objects currently in the game, as well as the List being loaded a different way instead of in one large block, that becomes a data problem
Review time: 20 minutes

03-11-22
Sprint 3

Readability:
Reviewing Boomerang.cs by Anooj Deshpande
The code is readable, the names are coherent but generally not super long, they adhere to most naming conventions. There are just enough comments
to explain the logic inside of the update method (though it's mostly self explanitory). Method and class names are capitalized as they should be, no
major issues
Review time: 6 minutes

Maintainability:
Reviewing GoriyaEnemy.cs by AJ Waizmann
For keeping track of the states of the Goriya, using an enum makes sense for the actions but not for the direction, there is only left or right and
having direction be an enum makes loading object data more difficult. The state of the Goriya should also probably only be declared in one place and
for the sake of simplicity and cohesion that should be the state machine, since that is the class that is keeping track of the state. Any projectile
that is created should be referenced as an IProjectile if it has been declared, though there should be no reference to a projectile as the 
GameObjectManager takes care of keeping track of projectiles. Most of the methods are coherent, they call on the state machine to do state logic as
they should. The update logic is fine for the most part but could be cleaner, and once again all references to updating/drawing the projectile should
be moved into the GameObjectManager. As an aside, many of the values that are instantiated in the constructor could have values that are loaded in 
from the data file, that's more of a note to myself for what to move over into LevelLoader
Review time: 20 minutes

04-09-22
Sprint 4

Readability:
Reviewing Camera.cs by AJ Waizmann
This is a very simple piece of code but it is very readable and clean; things are named cohesively, in both the sense that the names are short but
sweet and get the point across and also adhere to naming conventions. Spacing is good and it is clear to see what is happening. Very minimal comments
are used which is good, except to explain how zoom works. All in all this is fairly good in terms of readability and I was able to understand pretty 
quickly
Review time: 10 minutes

Maintainability:
Reviewing Physics.cs by Rachel Watters
Global variables seem to be good and are all purposeful (There have been issues with making variables that should be parameters into global variables, 
not with Rachel in specific but it is something I'm looking out for more, but this class seems to have avoided that). The initial values of gravity, 
drag, and some of the other magic numbers should most likely be taken from the Utility Class. both Vertical and Horizontal change is very simple and 
clean, using the established physics equations well for updating the position displacement and the change in velocity which is good. There is a lack 
of logic for updating accelerations and things however, I believe this logic is in the PlayerMovementState.cs class, but I do think some of this logic 
for keeping track of acceleration and drag should be inside Physics.cs itself, especially since if another class needs to use Physics.cs since that 
logic would most likely have to be repeated for them as well. Overall fairly clean and well done but could use a little reorganizing. We may want to 
consider either making properties for the vectors, either ones that get private vectors inside Physics.cs or replace the variables themselves with 
properties that have a public getter but a private setter, this is for ease of access though and so that there are fewer bugs when manipulating the 
values of the vectors
Review time: 15 minutes

04-23-22
Sprint 5

Readability:
Reviewing Physics.cs by Rachel Watters
For the most part this code is fairly readable, variables of similar type and use are grouped together, constants adhere to naming conventions, and there are minimal comments but the ones that are there help to clarify what some conditions are checking for. However there are a lot of booleans in this code that might be overcomplicating things, and it makes the code hard to read. Booleans like isJumping and startJumping have very similar name and one of these seems reduntant as they seem to be tracking more or less the same thing, so there may be some simplifying that could be done here. Overall the code is well formatted though
Review time: 15 minutes

Maintainability:
Reviewing Sidekick.cs by Aadya Jain
I had a little trouble understanding what was going on in this class at first, I think there are a good few issues here though, which makes sense seeing as this code isn't going to be used for demoing. For one I don't think the sidekick should have to iterate through all of the objects in the game object list twice, since it's done once for attacking and once for pathfinding. There is probably an easier way by passing only a necessary subset of enemies in for checking based off of position or by having the checks done somewhere else entirely. It seems that some of the checks are collision detection and those should likely be done in the class that handles collisions. The tuple keeping track of three booleans could likely get confusing and could probably be split up into three different variables for the sake of simplicity, especially since one of the variables in the tuple is a boolean that keeps track of whether the sidekick is facing right but there is a boolean with the same function declared as well. The pathfinding could be greatly simplified as well I think, with instead of the AI calculating next squares based on iterating through the lists, you could calculate a next closest position based on where the player is and have a wieght to how far behind the sidekick should be, which is sort of happening, but I think the algorithm could be better there. There seems to be a simple bump function for collisions, and I have no issue with the use of the state machine. This class is complex but I think it could be simplified some
Review time: 1 hour
